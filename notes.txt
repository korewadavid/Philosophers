
1. General project idea / What I learned

	solve dining philosophers problem:
	
	The philosophers project is about building a multi-threaded concurrent algorithm for solving the dining philosophers problem. The problem consists of one or more philosophers sitting around a round table, each one has its own plate to eat from and a fork on the left side of the plate, this means there will be a fork on the left and right side of each plate. In order to eat a philosopher needs to use both forks, to stay alive the philosophers must eat, after eating they drop their forks and start sleeping and they think while they wait for their two corresponding forks to be free to eat once again.

	The problem consists in how to create a routine so that no philosopher dies of starvation.

	
	what are threads?:
	
	In the program the philosophers will be threads. A thread is a sequence of statements that executes over time and exists as a subset of a process. A single process/program can contain multiple threads, where they share memory and resources.
	
	
	multi-threaded program/concurrent vs parallel execution:

	A multi-threaded program has multiple sequences of statments (threads) that execute over the same period of time, threads can execute at the same time (parallel execution) or execute in a particular order (concurrent execution), in our case the philosophers (threads) cannot all eat (execute) at the same time because there are not enough forks for them to all eat at the same time, they need 2 forks to eat, so our thread execution needs to be concurrent.
	
	
	race conditions/mutex:

	When writing multi-threaded programs a common problem experienced are race conditions. These occur when two or more threads (in our case, the philosophers), try to access and modify the same variable at the same time

	To solve this we could use a flag locking the code that modifys the variable, if a thread tries to run the block of code but its locked it will wait until the code has been unlocked to run the code, this way the second thread wont overwrite the value of the variable with what it read before waiting. This lock is called Mutex, and in our program the forks will be Mutexs, the philosophers will wait for its left and right fork to be dropped/unlocked so it can eat 
	


2. Project rules and external functions

	summarize global and mandatory rules (program arguments, output messages)

	summarize external function used and whats is its purpose in the project
